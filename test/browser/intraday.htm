<meta charset="utf8" /><style>input[id*=d]{width:70px;} textarea{font-size:1.2em;}</style>
<script src="https://cdn.jsdelivr.net/npm/decimal.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/localforage"></script>
<script src="https://cdn.jsdelivr.net/npm/pako/dist/pako.min.js"></script>
<script src="../../tse.js"></script>

<label><input type="checkbox" onclick="s.disabled = !this.checked" checked />symbol</label>
<textarea id="s" class="large">ذوب فولاد خساپا شپنا</textarea>
<br>

<label><input type="checkbox" onchange="f.disabled = !this.checked"/>filter</label>
<input id="f" type="text" class="large" value="t=300" disabled />
<label><input type="checkbox" onchange="slc.disabled = !this.checked" />slice(0,</label>
<input id="slc" type="number" value="10" style="width:50;" disabled />)
<br><br>

start<input id="d1" type="text" value="1d" maxlength="8" />
end  <input id="d2" type="text" value=""   maxlength="8" />
<br>

<label><input id="z" type="checkbox" checked />gzip</label> <br>
<label><input id="y" type="checkbox" checked />cache</label> <br>
<br>
<button onclick="go().then(i => this.disabled = false), this.disabled = true">Go</button>
<button onclick="clr().then(i => this.disabled = false), this.disabled = true">Clear</button>

<br><br><br><br><hr>
<button onclick="console.clear()">console.clear()</button>
<button onclick="localforage.clear()">localforage.clear()</button>
<button onclick="store.clear()">store.clear()</button>
<button onclick="localStorage.clear()">localStorage.clear()</button>

<script>
let r;

async function go() {
	const syms = await getSyms();
	
	r = await tse.getIntraday(syms, {
		startDate: parseDateOption(d1.value),
		endDate:   parseDateOption(d2.value),
		gzip:      z.checked,
		cache:     y.checked
	});
	
	if (r) console.log(r.error || r.data);
}

let store = localforage.createInstance({name: 'tse.intraday'});
async function clr() {
	const syms = await getSyms();
	const keys = (await tse.getInstruments()).filter(i => syms.includes(i.Symbol)).map(i => i.InsCode);
	await Promise.all( keys.map(i => store.removeItem(i)) );
}


async function getSyms() {
	let syms = [];
	
	if (!s.disabled) syms = s.value.split(' ');
	
	if (!f.disabled) {
		const filters = parseFilterStr(f.value);
		if (filters) {
			const ins = await tse.getInstruments();
			const matched = filterSymbols(ins, filters);
			syms = [...syms, ...matched];
		}
		
		if (!slc.disabled) syms = syms.slice(0, +slc.value);
	}
	
	return [...new Set(syms)];
}
function parseFilterStr(str='') {
	const map = {t:'YVal', i:'CSecVal', m:'Flow', b:'CComVal', y:'YMarNSC', g:'CGrValCot'};
	
	const norm = new Set(Object.keys(map));
	const spec = new Set(['P', 'D', 'R']);
	
	const arr = str.split(' ');
	
	const normal = new Map();
	const special = new Map();
	
	for (const i of arr) {
		const arg = i.slice(0,1);
		const isNormal = norm.has(arg);
		const isSpecial = spec.has(arg);
		
		if (isNormal) {
			if (i.indexOf('=') === -1) continue;
			const [key, val] = i.split('=');
			if ( !map[key] ) continue;
			if ( !/^[\d\w,]+$/.test(val) ) continue;
			const parsed = key === 'i' ? val.split(',').map(i=> i+' ') : val.split(',');
			normal.set(map[key], new Set(parsed));
			continue;
		}
		
		if (isSpecial) {
			if (arg === 'P' || arg === 'D') {
				if (i.indexOf('=') === -1) continue;
				let [, val] = i.split('=');
				let not;
				if (val[0] === '!') {
					val = val.slice(1);
					not = true;
				}
				let r;
				try { r = new RegExp(val); } catch { continue; }
				special.set(arg, not ? s => !r.test(s)  : s => r.test(s));
				continue;
			}
			
			if (arg === 'R') special.set(arg, true);
		}
	}
	
	return normal.size + special.size === arr.length ? { normal, special } : undefined;
}
function filterSymbols(instruments, filters) {
	const { normal, special } = filters;
	const keys = [...normal.keys()];
	const { P, D, R } = Object.fromEntries([...special]);
	
	const syms = instruments.filter(instrument => {
		const { Symbol, DEven, SymbolOriginal } = instrument;
		const renamed = SymbolOriginal ? true : false;
		const conds = [
			keys.every( key => normal.get(key).has(instrument[key]) ),
			P            ? P(Symbol) : true,
			D            ? D(DEven)  : true,
			R && renamed ? false     : true
		];
		return conds.every(i => i);
	}).map(i => i.Symbol);
	
	return syms;
}
function parseDateOption(s) {
	let result;
	
	const mindate = 20010321;
	const relative = s.match(/^(\d{1,3})(y|m|d)$/);
	
	if (relative) {
		const n = parseInt(relative[1], 10);
		const m = ({y:'FullYear',m:'Month',d:'Date'})[ relative[2] ];
		const d = new Date();
		d['set'+m](d['get'+m]() - n);
		d.setDate(d.getDate() - 1);
		const res = (d.getFullYear()*10000) + ((d.getMonth()+1)*100) + d.getDate();
		result = res < mindate ? ''+mindate : ''+res;
	} else if (/^\d{8}$/.test(s)) {
		let src = [+s.slice(0,4), +s.slice(4,6), +s.slice(6,8)];
		if (src[0] < 2000) {
			const {gy,gm,gd} = jalaali.toGregorian(...src);
			src = [gy,gm,gd];
		}
		const [y,m,d] = src;
		const res = (y*10000) + (m*100) + d;
		result = res < mindate ? ''+mindate : ''+res;
	}
	
	return result;
}
</script>